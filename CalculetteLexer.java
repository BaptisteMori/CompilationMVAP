// Generated from Calculette.g4 by ANTLR 4.4
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CalculetteLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__27=1, T__26=2, T__25=3, T__24=4, T__23=5, T__22=6, T__21=7, T__20=8, 
		T__19=9, T__18=10, T__17=11, T__16=12, T__15=13, T__14=14, T__13=15, T__12=16, 
		T__11=17, T__10=18, T__9=19, T__8=20, T__7=21, T__6=22, T__5=23, T__4=24, 
		T__3=25, T__2=26, T__1=27, T__0=28, TYPE=29, NEWLINE=30, WS=31, ENTIER=32, 
		AND=33, OR=34, NOT=35, RETOUR=36, IDENTIFIANT=37, UNMATCH=38;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'"
	};
	public static final String[] ruleNames = {
		"T__27", "T__26", "T__25", "T__24", "T__23", "T__22", "T__21", "T__20", 
		"T__19", "T__18", "T__17", "T__16", "T__15", "T__14", "T__13", "T__12", 
		"T__11", "T__10", "T__9", "T__8", "T__7", "T__6", "T__5", "T__4", "T__3", 
		"T__2", "T__1", "T__0", "TYPE", "NEWLINE", "WS", "ENTIER", "AND", "OR", 
		"NOT", "RETOUR", "IDENTIFIANT", "UNMATCH"
	};


	public CalculetteLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Calculette.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2(\u00f3\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\3\2\3\2\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3"+
		"\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3"+
		"\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3"+
		"\24\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\30\3"+
		"\30\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\34\3\34\3"+
		"\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u00ba\n\36\3\37"+
		"\5\37\u00bd\n\37\3\37\3\37\3\37\3\37\3 \6 \u00c4\n \r \16 \u00c5\3 \3"+
		" \3!\6!\u00cb\n!\r!\16!\u00cc\3\"\3\"\3\"\3\"\3\"\5\"\u00d4\n\"\3#\3#"+
		"\3#\3#\5#\u00da\n#\3$\3$\3$\3$\5$\u00e0\n$\3%\3%\3%\3%\3%\3%\3%\3&\3&"+
		"\7&\u00eb\n&\f&\16&\u00ee\13&\3\'\3\'\3\'\3\'\2\2(\3\3\5\4\7\5\t\6\13"+
		"\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'"+
		"\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'"+
		"M(\3\2\5\4\2\13\13\"\"\5\2C\\aac|\6\2\62;C\\aac|\u00fa\2\3\3\2\2\2\2\5"+
		"\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2"+
		"\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33"+
		"\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2"+
		"\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2"+
		"\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2"+
		"\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K"+
		"\3\2\2\2\2M\3\2\2\2\3O\3\2\2\2\5Q\3\2\2\2\7X\3\2\2\2\t]\3\2\2\2\13`\3"+
		"\2\2\2\rb\3\2\2\2\17d\3\2\2\2\21j\3\2\2\2\23l\3\2\2\2\25n\3\2\2\2\27r"+
		"\3\2\2\2\31u\3\2\2\2\33x\3\2\2\2\35z\3\2\2\2\37|\3\2\2\2!~\3\2\2\2#\u0085"+
		"\3\2\2\2%\u008b\3\2\2\2\'\u0093\3\2\2\2)\u0096\3\2\2\2+\u0099\3\2\2\2"+
		"-\u009b\3\2\2\2/\u009d\3\2\2\2\61\u00a3\3\2\2\2\63\u00a6\3\2\2\2\65\u00ab"+
		"\3\2\2\2\67\u00ad\3\2\2\29\u00af\3\2\2\2;\u00b9\3\2\2\2=\u00bc\3\2\2\2"+
		"?\u00c3\3\2\2\2A\u00ca\3\2\2\2C\u00d3\3\2\2\2E\u00d9\3\2\2\2G\u00df\3"+
		"\2\2\2I\u00e1\3\2\2\2K\u00e8\3\2\2\2M\u00ef\3\2\2\2OP\7\61\2\2P\4\3\2"+
		"\2\2QR\7t\2\2RS\7g\2\2ST\7c\2\2TU\7f\2\2UV\7n\2\2VW\7p\2\2W\6\3\2\2\2"+
		"XY\7v\2\2YZ\7t\2\2Z[\7w\2\2[\\\7g\2\2\\\b\3\2\2\2]^\7#\2\2^_\7?\2\2_\n"+
		"\3\2\2\2`a\7}\2\2a\f\3\2\2\2bc\7=\2\2c\16\3\2\2\2de\7y\2\2ef\7j\2\2fg"+
		"\7k\2\2gh\7n\2\2hi\7g\2\2i\20\3\2\2\2jk\7\177\2\2k\22\3\2\2\2lm\7?\2\2"+
		"m\24\3\2\2\2no\7h\2\2op\7q\2\2pq\7t\2\2q\26\3\2\2\2rs\7k\2\2st\7h\2\2"+
		"t\30\3\2\2\2uv\7>\2\2vw\7?\2\2w\32\3\2\2\2xy\7*\2\2y\34\3\2\2\2z{\7,\2"+
		"\2{\36\3\2\2\2|}\7.\2\2} \3\2\2\2~\177\7t\2\2\177\u0080\7g\2\2\u0080\u0081"+
		"\7r\2\2\u0081\u0082\7g\2\2\u0082\u0083\7c\2\2\u0083\u0084\7v\2\2\u0084"+
		"\"\3\2\2\2\u0085\u0086\7h\2\2\u0086\u0087\7c\2\2\u0087\u0088\7n\2\2\u0088"+
		"\u0089\7u\2\2\u0089\u008a\7g\2\2\u008a$\3\2\2\2\u008b\u008c\7r\2\2\u008c"+
		"\u008d\7t\2\2\u008d\u008e\7k\2\2\u008e\u008f\7p\2\2\u008f\u0090\7v\2\2"+
		"\u0090\u0091\7n\2\2\u0091\u0092\7p\2\2\u0092&\3\2\2\2\u0093\u0094\7@\2"+
		"\2\u0094\u0095\7?\2\2\u0095(\3\2\2\2\u0096\u0097\7?\2\2\u0097\u0098\7"+
		"?\2\2\u0098*\3\2\2\2\u0099\u009a\7>\2\2\u009a,\3\2\2\2\u009b\u009c\7@"+
		"\2\2\u009c.\3\2\2\2\u009d\u009e\7w\2\2\u009e\u009f\7p\2\2\u009f\u00a0"+
		"\7v\2\2\u00a0\u00a1\7k\2\2\u00a1\u00a2\7n\2\2\u00a2\60\3\2\2\2\u00a3\u00a4"+
		"\7>\2\2\u00a4\u00a5\7@\2\2\u00a5\62\3\2\2\2\u00a6\u00a7\7g\2\2\u00a7\u00a8"+
		"\7n\2\2\u00a8\u00a9\7u\2\2\u00a9\u00aa\7g\2\2\u00aa\64\3\2\2\2\u00ab\u00ac"+
		"\7+\2\2\u00ac\66\3\2\2\2\u00ad\u00ae\7-\2\2\u00ae8\3\2\2\2\u00af\u00b0"+
		"\7/\2\2\u00b0:\3\2\2\2\u00b1\u00b2\7k\2\2\u00b2\u00b3\7p\2\2\u00b3\u00ba"+
		"\7v\2\2\u00b4\u00b5\7h\2\2\u00b5\u00b6\7n\2\2\u00b6\u00b7\7q\2\2\u00b7"+
		"\u00b8\7c\2\2\u00b8\u00ba\7v\2\2\u00b9\u00b1\3\2\2\2\u00b9\u00b4\3\2\2"+
		"\2\u00ba<\3\2\2\2\u00bb\u00bd\7\17\2\2\u00bc\u00bb\3\2\2\2\u00bc\u00bd"+
		"\3\2\2\2\u00bd\u00be\3\2\2\2\u00be\u00bf\7\f\2\2\u00bf\u00c0\3\2\2\2\u00c0"+
		"\u00c1\b\37\2\2\u00c1>\3\2\2\2\u00c2\u00c4\t\2\2\2\u00c3\u00c2\3\2\2\2"+
		"\u00c4\u00c5\3\2\2\2\u00c5\u00c3\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00c7"+
		"\3\2\2\2\u00c7\u00c8\b \2\2\u00c8@\3\2\2\2\u00c9\u00cb\4\62;\2\u00ca\u00c9"+
		"\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc\u00ca\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd"+
		"B\3\2\2\2\u00ce\u00cf\7c\2\2\u00cf\u00d0\7p\2\2\u00d0\u00d4\7f\2\2\u00d1"+
		"\u00d2\7(\2\2\u00d2\u00d4\7(\2\2\u00d3\u00ce\3\2\2\2\u00d3\u00d1\3\2\2"+
		"\2\u00d4D\3\2\2\2\u00d5\u00d6\7q\2\2\u00d6\u00da\7t\2\2\u00d7\u00d8\7"+
		"~\2\2\u00d8\u00da\7~\2\2\u00d9\u00d5\3\2\2\2\u00d9\u00d7\3\2\2\2\u00da"+
		"F\3\2\2\2\u00db\u00dc\7p\2\2\u00dc\u00dd\7q\2\2\u00dd\u00e0\7v\2\2\u00de"+
		"\u00e0\7#\2\2\u00df\u00db\3\2\2\2\u00df\u00de\3\2\2\2\u00e0H\3\2\2\2\u00e1"+
		"\u00e2\7t\2\2\u00e2\u00e3\7g\2\2\u00e3\u00e4\7v\2\2\u00e4\u00e5\7w\2\2"+
		"\u00e5\u00e6\7t\2\2\u00e6\u00e7\7p\2\2\u00e7J\3\2\2\2\u00e8\u00ec\t\3"+
		"\2\2\u00e9\u00eb\t\4\2\2\u00ea\u00e9\3\2\2\2\u00eb\u00ee\3\2\2\2\u00ec"+
		"\u00ea\3\2\2\2\u00ec\u00ed\3\2\2\2\u00edL\3\2\2\2\u00ee\u00ec\3\2\2\2"+
		"\u00ef\u00f0\13\2\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f2\b\'\2\2\u00f2N\3"+
		"\2\2\2\13\2\u00b9\u00bc\u00c5\u00cc\u00d3\u00d9\u00df\u00ec\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}